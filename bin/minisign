#!/usr/bin/env node

var path = require('path')
var fs = require('fs')
var os = require('os')
var minisign = require('..')
var pkg = require('../package.json')
var sodium = require('sodium-native')
const cwd = process.cwd()
const minimist = require('minimist')
var readline = require('readline')
var Writable = require('stream').Writable

// import arguments from command line
var args = minimist(process.argv.slice(2), {
  string: ['m', 'x', 's', 'p', 'P', 'c', 't', 'k'],
  boolean: ['G', 'V', 'S', 'f', 'q', 'o', 'Q', 'help', 'version', 'secure'],
  alias: { h: 'help', v: 'version', x: 'secure' },
  unknown: function () {
    console.log('unrecognised command.')
    process.exit(1)
  }
})

// create muted output stream to read password
var mutableStdout = new Writable({
  write: function (chunk, encoding, callback) {
    if (!this.muted) {
      process.stdout.write(chunk, encoding)
    }
    callback()
  }
})

mutableStdout.muted = true

const usage = `
  Usage:
  $ minisign -G [-f] [-p pubkey file] [-s seckey file] [-c pubkey comment] [-t seckey comment]
  $ minisign -S [-s seckey file] [-x signature file] [-c comment] [-t trusted comment] -m file
  $ minisign -V [-x signature file] [-p pubkey file | -P public key] [-o] [-q] -m file

  -G                generate a new key pair
  -S                sign a file
  -V                verify that a signature is valid for a given file
  -m <file>         file to sign/verify
  -o                combined with -V, output the file content after verification
  -p <pubkeyfile>   public key file (default: ./minisign.pub)
  -P <pubkey>       public key, as a base64 string
  -s <seckey>       secret key file (default: ~/.minisign/minisign.key)
  -x <sigfile>      signature file (default: <file>.minisig)
  -c <comment>      add a one-line untrusted comment / comment for public key
  -t <comment>      add a one-line trusted comment / comment for secret key
  -q                quiet mode, suppress output
  -Q                pretty quiet mode, only print the trusted comment - overrides quiet mode
  -f                force. Combined with -G, overwrite a previous key pair
  -v                display version number
  -X                read password directly into secure buffer, note that input will not be hidden
`

// function to verify given signature
function verify (signature, sourceFile, PKinfo, output, quiet, pretty) {
  fs.readFile(sourceFile, (err, message) => {
    if (err) throw err
    var sigInfo = minisign.parseSignature(signature)
    if (minisign.verifySignature(sigInfo, message, PKinfo)) {
      if (!quiet && !pretty) {
        console.log('comment and signature verified.')
        console.log(tPrelude + sigInfo.trustedComment)
      } else if (pretty) {
        console.log(sigInfo.trustedComment.toString())
      }
      if (output) {
        console.log(message.toString())
      }
      process.exit()
    } else {
      if (!quiet) {
        console.log('signature verifaction failed.')
      }
      process.exit(1)
    }
  })
}

// function to sign a given file
function sign (opts, pwd) {
  fs.readFile(opts.sourceFile, (err, message) => {
    if (err) throw err
    fs.readFile(opts.SKfile, (err, SK) => {
      if (err) throw err
      var parsedSK = minisign.parseSecretKey(SK)
      var SKinfo = minisign.extractSecretKey(pwd, parsedSK)

      var signedOutput = minisign.signContent(message, SKinfo, opts)
      var stringOutput = signedOutput.outputBuf.toString()

      fs.writeFile(opts.sigFile, stringOutput, (err) => {
        if (err) throw err
        console.log('signature saved to', path.relative(cwd, opts.sigFile))
        process.exit()
      })
    })
  })
}

// callback to generate keypairs with password
function generate (opts, pwd) {
  var newKeys = minisign.keypairGen(pwd, opts)
  var keys = minisign.formatKeys(newKeys)
  var publicKey = newKeys.publicKey.toString('hex')

  fs.writeFile(opts.PKfile, keys.PK.toString(), opts.overwrite, (err) => {
    if (err && err.code === 'EEXIST') {
      console.log('keys already exist, use -f tag to force overwrite')
      process.exit(1)
    }
    fs.writeFile(opts.SKfile, keys.SK.toString(), opts.overwrite, (err) => {
      if (err && err.code === 'EEXIST') {
        console.log('keys already exist, use -f tag to force overwrite')
        process.exit(1)
      }
    })

    console.log('public key: ' + publicKey)
    console.log('public key saved to ', opts.PKfile)
    console.log('secret key encrypted and saved to ', opts.SKfile)
  })
}

// function to accept password from user
function secureRead (buf, opts, cb) {
  process.stdout.write('password: ')
  fs.read(0, buf, 0, buf.byteLength, null, (err, bytesRead, buf) => {
    if (err) throw err
    buf = buf.subarray(0, bytesRead - 1)
    sodium.sodium_mprotect_noaccess(buf)
    cb(opts, buf)
  })
}

// accept password without printing to stdout
// security issue: password is read as string before being passed
// into a secure buffer and therefore exists in memory
function hiddenRead (opts, cb) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: mutableStdout,
    terminal: true
  })

  var pwdBuf

  process.stdout.write('password: ')
  rl.question('password: ', function (password) {
    pwdBuf = sodium.sodium_malloc(4096)
    try {
      pwdBuf.fill(Buffer.from(password))
      pwdBuf = pwdBuf.subarray(0, password.length)
    } catch (error) {
      if (error instanceof TypeError) {
        pwdBuf = pwdBuf.subarray(0, 1)
      }
    }
    sodium.sodium_mprotect_noaccess(pwdBuf)
    console.log('')
    rl.close()
  })

  rl.on('close', function () {
    cb(opts, pwdBuf)
  })
}

// display info
if (args.help) {
  console.log(usage)
  process.exit()
}
if (args.version) {
  console.log(pkg.version)
  process.exit()
}

// initiate variables
var sourceFile
var sigFile
var passwordBuf
var opts = {}

var SKfile = path.join(os.homedir(), '.minisign/minisign.key')
var PKfile = path.resolve(cwd, '/minisign.pub')

var tPrelude = 'trusted comment: '

// configure inputs
if (args.p) {
  PKfile = path.resolve(cwd, args.p)
}
if (args.s) {
  SKfile = path.resolve(cwd, args.s)
}
if (args.m) {
  sourceFile = path.normalize(args.m)
} else if (args.S || args.V) {
  console.log('please specify file to sign/verify')
  process.exit(1)
}
if (args.x) {
  sigFile = path.resolve(cwd, args.x)
} else {
  sigFile = `${sourceFile}.minisig`
}

// generate keypair and save to files
if (args.G) {
  opts = { overwrite: { flag: 'wx' } }

  opts.SKfile = SKfile
  opts.PKfile = PKfile
  opts.PKcomment = args.c
  opts.SKcomment = args.t

  if (args.F) {
    opts.overwrite = { flag: 'w' }
  }

  if (args.secure) {
    passwordBuf = sodium.sodium_malloc(4096)
    secureRead(passwordBuf, opts, generate)
  } else {
    hiddenRead(opts, generate)
  }
}

// signing a file
if (args.S) {
  opts.sourceFile = path.normalize(args.m)
  opts.sigFile = sigFile
  opts.SKfile = SKfile
  opts.PKfile = PKfile

  opts.comment = args.c
  opts.tComment = args.t

  if (args.secure) {
    passwordBuf = sodium.sodium_malloc(4096)
    secureRead(passwordBuf, opts, sign)
  } else {
    hiddenRead(opts, sign)
  }
}

// verifying a signature
if (args.V) {
  if (args.o && (args.q || args.Q)) {
    console.log('cannot output content in quiet mode')
    process.exit(1)
  }
  if ((args.P && args.p) || (!args.P && !args.p)) {
    console.log('must provide unique key')
    process.exit(1)
  }

  fs.readFile(sigFile, (err, signature) => {
    if (err) throw err
    if (args.P) {
      var PKinfo = minisign.parseKeyCLI(args.P)
      verify(signature, sourceFile, PKinfo, args.o, args.q, args.Q)
    } else {
      fs.readFile(PKfile, (err, PK) => {
        if (err) throw err
        var PKinfo = minisign.parsePubKey(PK)
        verify(signature, sourceFile, PKinfo, args.o, args.q, args.Q)
      })
    }
  })
}
