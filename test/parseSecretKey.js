var test = require('tape')
var minisign = require('../minisign')
var fs = require('fs')
var sodium = require('sodium-native')

test('parse MINISIGN generated key file', function (t) {
  const untrustedComment = 'minisign encrypted secret key'

  fs.readFile('./fixtures/noString.key', function (err, data) {
    t.error(err)
    var SKinfo = minisign.parseSecretKey(data)
    var endData = Buffer.from(data.subarray(-105, -1).toString(), 'base64')

    t.equal(SKinfo.untrustedComment, untrustedComment)
    t.equal(SKinfo.signatureAlgorithm, 'Ed')
    t.equal(SKinfo.kdfAlgorithm, 'Sc')
    t.equal(SKinfo.cksumAlgorithm, 'B2')
    t.equal(SKinfo.kdfSalt.length, sodium.crypto_pwhash_scryptsalsa208sha256_SALTBYTES)
    t.equal(SKinfo.kdfOpsLimit, sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE)
    t.equal(SKinfo.kdfMemLimit, sodium.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE)
    t.equal(SKinfo.keynumSK.length, 104)
    t.equal(SKinfo.keynumSK.slice(-1)[0], endData.slice(-2)[1])
    t.end()
  })
})

test('parse key pair generated by minisign.js', function (t) {
  const untrustedComment = 'minisign encrypted secret key'
  const keyPair = minisign.keypairGen(untrustedComment, '')
  const keyInfo = keyPair.SKoutputBuffer

  var SKinfo = minisign.parseSecretKey(keyInfo)
  var endData = Buffer.from(keyInfo.subarray(-105, -1).toString(), 'base64')

  t.equal(SKinfo.untrustedComment, untrustedComment)
  t.equal(SKinfo.signatureAlgorithm, 'Ed')
  t.equal(SKinfo.kdfAlgorithm, 'Sc')
  t.equal(SKinfo.cksumAlgorithm, 'B2')
  t.equal(SKinfo.kdfSalt.length, sodium.crypto_pwhash_scryptsalsa208sha256_SALTBYTES)
  t.equal(SKinfo.kdfOpsLimit, sodium.crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE)
  t.equal(SKinfo.kdfMemLimit, sodium.crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE)
  t.equal(SKinfo.keynumSK.length, 104)
  t.equal(SKinfo.keynumSK.slice(-1)[0], endData.slice(-2)[1])
  t.end()
})

test('comment removed from MINISIGN file', function (t) {
  fs.readFile('./fixtures/missingComment.key', function (err, data) {
    t.error(err)
    t.throws(() => minisign.parseSecretKey(data), '[ERR_ASSERTION]')
    t.end()
  })
})

test('line breaks within key', function (t) {
  fs.readFile('./fixtures/lineBreakStart.key', function (err, data) {
    t.error(err)
    t.throws(() => minisign.parseSecretKey(data), '[ERR_ASSERTION]')
    t.end()
  })
})

test('line break at the end of key', function (t) {
  fs.readFile('./fixtures/lineBreakEnd.key', function (err, data) {
    t.error(err)
    t.throws(() => minisign.parseSecretKey(data), '[ERR_ASSERTION]')
    t.end()
  })
})

test('missing line break after comment', function (t) {
  fs.readFile('./fixtures/missingLineBreak.key', function (err, data) {
    t.error(err)
    t.throws(() => minisign.parseSecretKey(data), '[ERR_ASSERTION]')
    t.end()
  })
})
